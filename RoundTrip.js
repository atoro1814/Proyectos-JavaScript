/* 
Â¿Hay algÃºn lugar al que siempre hayas querido volar? ðŸŒŽ

Vamos a usar lo que aprendimos para construir dos objetos para pases de abordar para un viaje de ida y vuelta:

ðŸ›« departTripTicket
ðŸ›¬ returnTripTicket
Ambos objetos deben tener las siguientes propiedades:

.name para el pasajero.
.from para de dÃ³nde estÃ¡ volando el pasajero.
.to para a dÃ³nde estÃ¡ volando el pasajero.
.businessClass valor booleano para si estÃ¡ en clase ejecutiva (true/false).
El mÃ©todo .upgrade() cambia la propiedad .businessClass a true o imprime un mensaje si ya es true (por ejemplo, "Â¡Tu boleto ya es de clase ejecutiva!").
DespuÃ©s de crear estos objetos, usa el mÃ©todo .upgrade() en al menos uno de ellos y luego registra ambos objetos en la consola.

Bonus: Â¿Quieres un desafÃ­o adicional? Agrega las propiedades .leaveTime y .arriveTime a ambos objetos (enteros del 1 al 24). Luego, define una propiedad de mÃ©todo .flightTime() que calcule e imprima el tiempo de viaje con las propiedades .leaveTime y .arriveTime.
*/

const departTripTicket = {
    name : "Alexander",
    from : "Chile",
    to : "EEUU",
    businessClass : false,
    upgrade(){
        if (this.businessClass){
            console.log("Â¡Tu boleto ya es de clase ejecutiva!");
        }else{
            this.businessClass = true;
            console.log("Â¡Felicidades! Has sido ascendido a clase ejecutiva");
        }
    }
}

const returnTripTicket = {
    name : "Alexander",
    from : "EEUU",
    to : "Chile",
    businessClass : false,
    upgrade(){
        if (this.businessClass){
            console.log("Â¡Tu boleto ya es de clase ejecutiva!");
        }else{
            this.businessClass = true;
            console.log("Â¡Felicidades! Has sido ascendido a clase ejecutiva");
        }
    }
}


